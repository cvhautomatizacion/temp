<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monitor de Temperatura y Humedad</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gauge.js/1.3.7/gauge.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #121212;
            color: #e0e0e0;
        }
        .container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: center;
        }
        .card {
            background-color: #1e1e1e;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid #333;
        }
        .gauge-container {
            width: 300px;
            text-align: center;
        }
        .chart-container {
            width: 100%;
            height: 300px;
        }
        .value-display {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
            color: #ffffff;
        }
        .connection-status {
            padding: 10px;
            border-radius: 4px;
            text-align: center;
            margin-bottom: 20px;
        }
        .connected {
            background-color: #28a745;
            color: #ffffff;
        }
        .disconnected {
            background-color: #dc3545;
            color: #ffffff;
        }
        h1, h2 {
            color: #ffffff;
            text-align: center;
        }
        .settings {
            margin-bottom: 20px;
            text-align: center;
        }
        input, button {
            padding: 10px;
            margin: 5px;
            border-radius: 5px;
            border: 1px solid #555;
            background-color: #333;
            color: #e0e0e0;
        }
        button:hover {
            background-color: #444;
        }
    </style>
</head>
<body>
    <h1>Monitor de Temperatura y Humedad en Tiempo Real</h1>

    <div class="settings">
        <label for="wsUrl">URL del WebSocket:</label>
        <input type="text" id="wsUrl" value="ws://localhost:1880/ws/temperature-humidity" style="width: 300px;">
        <button id="connectBtn">Conectar</button>
    </div>

    <div id="connectionStatus" class="connection-status disconnected">
        Desconectado
    </div>

    <div class="container">
        <div class="card gauge-container">
            <h2>Temperatura Actual</h2>
            <canvas id="temperatureGauge"></canvas>
            <div id="temperatureValue" class="value-display">0.00 °C</div>
        </div>

        <div class="card gauge-container">
            <h2>Humedad Actual</h2>
            <canvas id="humidityGauge"></canvas>
            <div id="humidityValue" class="value-display">0.00 %</div>
        </div>

        <div class="card chart-container">
            <h2>Historial de Temperatura</h2>
            <canvas id="temperatureChart"></canvas>
        </div>

        <div class="card chart-container">
            <h2>Historial de Humedad</h2>
            <canvas id="humidityChart"></canvas>
        </div>
    </div>

    <script>
        // Variables globales
        let ws;
        let temperatureGaugeChart;
        let humidityGaugeChart;
        let temperatureLineChart;
        let humidityLineChart;
        let temperatureHistory = [];
        let humidityHistory = [];
        const maxDataPoints = 30;

        // Inicializar gráficos
        function initGauge(canvasId, opts) {
            const gaugeCanvas = document.getElementById(canvasId);
            return new Gauge(gaugeCanvas).setOptions(opts);
        }

        function initLineChart(ctx, label, borderColor) {
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: label,
                        data: [],
                        borderColor: borderColor,
                        tension: 0.1,
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: label,
                                color: '#e0e0e0'
                            },
                            ticks: {
                                color: '#e0e0e0'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Tiempo',
                                color: '#e0e0e0'
                            },
                            ticks: {
                                color: '#e0e0e0'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#e0e0e0'
                            }
                        }
                    }
                }
            });
        }

        // Conectar WebSocket
        function connectWebSocket(url) {
            if (ws) {
                ws.close();
            }

            try {
                ws = new WebSocket(url);

                ws.onopen = function() {
                    const statusEl = document.getElementById('connectionStatus');
                    statusEl.textContent = 'Conectado';
                    statusEl.classList.remove('disconnected');
                    statusEl.classList.add('connected');
                };

                ws.onclose = function() {
                    const statusEl = document.getElementById('connectionStatus');
                    statusEl.textContent = 'Desconectado';
                    statusEl.classList.remove('connected');
                    statusEl.classList.add('disconnected');

                    // Intento de reconexión después de 5 segundos
                    setTimeout(() => {
                        connectWebSocket(url);
                    }, 5000);
                };

                ws.onerror = function(error) {
                    console.error('Error en WebSocket:', error);
                    const statusEl = document.getElementById('connectionStatus');
                    statusEl.textContent = 'Error de conexión';
                    statusEl.classList.remove('connected');
                    statusEl.classList.add('disconnected');
                };

                ws.onmessage = function(event) {
                    try {
                        const data = JSON.parse(event.data);
                        updateGauge('temperature', data.temperature);
                        updateGauge('humidity', data.humidity);
                        updateChart('temperature', data.temperature, data.timestamp);
                        updateChart('humidity', data.humidity, data.timestamp);
                    } catch (e) {
                        console.error('Error al procesar los datos:', e);
                    }
                };
            } catch (e) {
                console.error('Error al crear WebSocket:', e);
            }
        }

        // Actualizar manómetro
        function updateGauge(type, value) {
            if (type === 'temperature') {
                temperatureGaugeChart.set(value);
                document.getElementById('temperatureValue').textContent = value.toFixed(2) + ' °C';
            } else if (type === 'humidity') {
                humidityGaugeChart.set(value);
                document.getElementById('humidityValue').textContent = value.toFixed(2) + ' %';
            }
        }

        // Actualizar gráfica
        function updateChart(type, value, timestamp) {
            const timeStr = new Date(timestamp).toLocaleTimeString();
            const history = type === 'temperature' ? temperatureHistory : humidityHistory;
            const chart = type === 'temperature' ? temperatureLineChart : humidityLineChart;

            history.push({
                time: timeStr,
                value: value
            });

            // Limitar número de puntos en la gráfica
            if (history.length > maxDataPoints) {
                history.shift();
            }

            // Actualizar datos de la gráfica
            chart.data.labels = history.map(item => item.time);
            chart.data.datasets[0].data = history.map(item => item.value);
            chart.update();
        }

        // Inicializar la aplicación
        document.addEventListener('DOMContentLoaded', function() {
            temperatureGaugeChart = initGauge('temperatureGauge', {
                angle: 0,
                lineWidth: 0.3,
                radiusScale: 1,
                pointer: {
                    length: 0.6,
                    strokeWidth: 0.035,
                    color: '#ffffff'
                },
                limitMax: true,
                limitMin: true,
                colorStart: '#1f77b4',
                colorStop: '#ff7f0e',
                strokeColor: '#333',
                generateGradient: true,
                highDpiSupport: true,
                staticLabels: {
                    font: "10px sans-serif",
                    labels: [0, 20, 40, 60, 80, 100],
                    color: "#ffffff",
                    fractionDigits: 0
                },
                staticZones: [
                    {strokeStyle: "#30B32D", min: 0, max: 20},
                    {strokeStyle: "#FFDD00", min: 20, max: 60},
                    {strokeStyle: "#F03E3E", min: 60, max: 100}
                ],
            });
            temperatureGaugeChart.maxValue = 100;
            temperatureGaugeChart.setMinValue(0);
            temperatureGaugeChart.animationSpeed = 32;
            temperatureGaugeChart.set(0);

            humidityGaugeChart = initGauge('humidityGauge', {
                angle: 0,
                lineWidth: 0.3,
                radiusScale: 1,
                pointer: {
                    length: 0.6,
                    strokeWidth: 0.035,
                    color: '#ffffff'
                },
                limitMax: true,
                limitMin: true,
                colorStart: '#1f77b4',
                colorStop: '#ff7f0e',
                strokeColor: '#333',
                generateGradient: true,
                highDpiSupport: true,
                staticLabels: {
                    font: "10px sans-serif",
                    labels: [0, 20, 40, 60, 80, 100],
                    color: "#ffffff",
                    fractionDigits: 0
                },
                staticZones: [
                    {strokeStyle: "#30B32D", min: 0, max: 30},
                    {strokeStyle: "#FFDD00", min: 30, max: 70},
                    {strokeStyle: "#F03E3E", min: 70, max: 100}
                ],
            });
            humidityGaugeChart.maxValue = 100;
            humidityGaugeChart.setMinValue(0);
            humidityGaugeChart.animationSpeed = 32;
            humidityGaugeChart.set(0);

            temperatureLineChart = initLineChart(document.getElementById('temperatureChart').getContext('2d'), 'Temperatura (°C)', 'rgb(255, 99, 132)');
            humidityLineChart = initLineChart(document.getElementById('humidityChart').getContext('2d'), 'Humedad (%)', 'rgb(54, 162, 235)');

            // Manejar conexión
            document.getElementById('connectBtn').addEventListener('click', function() {
                const url = document.getElementById('wsUrl').value;
                connectWebSocket(url);
            });

            // Autoconectar con la URL predeterminada
            const defaultUrl = document.getElementById('wsUrl').value;
            connectWebSocket(defaultUrl);
        });
    </script>
</body>
</html>
